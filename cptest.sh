#!/bin/bash

# 読みにくいコードですいません
C_RESET="\033[m"
C_INLINE="\033[0;38;5;232;47m"
C_BOLD="\033[1;39;49m"
C_GRAY="\033[0;38;5;245m"
C_RED="\033[0;31;49m"
C_GREEN="\033[0;32;49m"
C_BLUE="\033[0;34;49m"
C_YELLOW="\033[0;33;49m"
# C_MAGENTA="\033[0;35;49m";
C_BRED="\033[1;31;49m"
C_BGREEN="\033[1;32;49m"
C_BBLUE="\033[1;34;49m"

GEN_NUM=12
PASS_FILE="./password"
TOKENS_FILE="./tokens"
TIME_FILE="./bin/xdg-open.log"
INPUT_FILE="./input.txt"
CARGO_TOML="./Cargo.toml"

column_lim=$(tput cols)
((column_lim -= 10))
[[ $column_lim -gt 110 ]] && column_lim=110
[[ $column_lim -lt 40 ]] && column_lim=40

print_color() {
  seq 0 255 | xargs -I {} printf '\033[38;5;{}m{}\033[m '
  echo
  for i in {0..9}; do
    for j in {0..9}; do
      echo -en "\e[0;3${i};4${j}m#"
    done
    echo
  done
  echo -en "\e[m"
}
usage() {
  # print_color
  cat <<EOF
USAGE: cptest.sh [-h] {t,s,f,a,r,p,g,d} [<SOLUTION_PATH>]

positional arguments:
  DEFAULT   run your solution with ${INPUT_FILE} as the standard input
  a         open all submissions page
  d         run your solution and model solution using inputs generated by ./generate.py as the standard input and compare the results of the runs
  f         Flexible judging using ./judge.py for problems with multiple solutions (you can also validate your solution by simply using "assert")
  g         run your solution using inputs generated by ./generate.py as the standard input
  p         \$ git add --all; git commit -m "Update" .; git push origin master:master (option -m can be set)
  r         for reactive problems
  s         submit your solution (option -y is available, URL is set from ${projpath})
  t         get sample inputs and test your solution with them (option -e, --system can be set, URL is set from ${projpath})
  v         \$ oj-verify run "${projpath}"

optional arguments:
  -h      show this help and exit

SOLUTION_PATH:
  The path to your solution
EOF
}
complete_file_path() {
  local tmp
  tmp=$1
  # tmp=${tmp/*\/compro/.}
  [[ $tmp =~ ^./ ]] && tmp="${tmp:2}"
  if [ ! -e "$tmp" ] && [[ ! $tmp =~ ^src ]]; then
    tmp="src/${tmp}"
    [ -e "$tmp" ] || tmp=${tmp/src/src_old}
  fi
  echo "$tmp"
}
search() {
  local SEARCH_FILE
  case "$2" in
  '')
    input_line_number=$(wc -l <"$INPUT_FILE")
    if [[ $input_line_number -gt 200 ]]; then
      SEARCH_FILE=./bin/input.txt
      tail -n 50 "$INPUT_FILE" >>"$SEARCH_FILE"
    else
      SEARCH_FILE=$INPUT_FILE
    fi
    ;;
  *)
    SEARCH_FILE="$2"
    ;;
  esac
  #  [] 内は「空行でないなら」の意。これがないと最終行が読まれない
  while IFS= read -r LINE || [ -n "$LINE" ]; do
    # スペースで分割
    local word
    for word in $LINE; do
      # RegEx(REGular EXpression)には""を付けない
      # マッチ部分は ${BASH_REMATCH[0,1,...]} に格納される
      if [[ $word =~ .*${1}.* ]]; then
        echo "$word"
        return 0
      fi
    done
  done <"$SEARCH_FILE"
  return 1
}
url_setting() {
  url=${url//\"/}
  baseurl=${url#*//}
  baseurl=${baseurl%%/*}
  baseurl=${baseurl/www./}
  # supported websites https://github.com/online-judge-tools/api-client#supported-websites
  # url: https://www.spoj.com/problems/RMQSQ/ -> https://www.spoj.com/problems/RMQSQ
  problem=$(echo "$url" | sed -e 's/\/$//g')
  problem=${problem##*/}
  sampleinputfile="sample-1.in"
  case "$baseurl" in
  "atcoder.jp")
    url=${url%\?*}
    problem="atcoder_"${problem%%\?*}
    ;;
  "judge.yosupo.jp")
    sampleinputfile="example_00.in"
    problem="yosupo_"${problem}
    ;;
  "judge.u-aizu.ac.jp" | "onlinejudge.u-aizu.ac.jp")
    # https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DPL_1_B&lang=jp
    problem=${problem#*id\=}
    problem="aoj_"${problem%%&*}
    ;;
  "poj.org")
    # http://poj.org/problem?id=2031
    problem="poj_"${problem#*id\=}
    ;;
  "yukicoder.me")
    # https://yukicoder.me/problems/no/3014
    xdg-open "yuki_${problem}"
    ;;
  esac
}
hide_comments_cpp() {
  # com1: //... , com2: /*...*/
  local f_com2 tmp blank_line_zero blank_line_one line_number non_blank_line_exist
  blank_line_zero=0
  blank_line_one=0
  f_com2=0
  line_number=0
  non_blank_line_exist=0
  # total_line_number=$(wc -l < "$1")
  while IFS="" read -r LINE || [ -n "$LINE" ]; do
    ((line_number++))
    if [[ $f_com2 -eq 0 ]]; then
      # エラー表示過剰化機能の削除
      [[ $LINE =~ ^\#define[[:blank:]]_GLIBCXX_DEBUG ]] && continue
      if [[ $LINE =~ ^\#define[[:blank:]]PROBLEM ]]; then
        url="${LINE#*\"}"
        url="${url//\"/}"
        url_setting
        continue
      fi
      [[ $LINE =~ ^\#include[[:blank:]]\<debug\.hpp\> ]] && continue
      [[ $LINE =~ ^\#line ]] && continue
      [[ $LINE =~ ^[[:blank:]]*(chro)|(dout) ]] && continue
      # req: one-linear
      [[ $LINE =~ isdbg ]] && continue
      # 0:true の慣例に従っている
      if [[ $LINE =~ ^\#include[[:blank:]]\<atcoder && $expands_acl -eq 0 ]]; then
        # from: #include <atcoder/dsu>
        # to  : #include "atcoder/dsu"
        LINE=${LINE/</\"}
        LINE=${LINE/>/\"}
      fi
      if [[ $LINE =~ \/\/ && ! $LINE =~ \".*\/\/.*\" && ! $LINE =~ \/\/[[:blank:]]namespace ]]; then
        # 行末尾でも //... 削除
        # なお、cout << "//" << endl; は非対応なので注意
        # [:blank:]//...
        LINE=${LINE%%\/\/*}
        # sed と違い \s は使えず、[[:blank:]] を使う。
        [[ $LINE =~ ^[[:blank:]]*$ ]] && continue
      fi
      # shellcheck disable=SC2001
      LINE=$(echo "$LINE" | sed 's/\s*$//')
      if [[ $LINE =~ \/\* ]]; then
        ## /*...
        # 一行での /*...*/ に対策
        if [[ $LINE =~ \/\*.*\*\/ ]]; then
          # shellcheck disable=SC2001
          # tmp=$(echo "$LINE" | sed 's/\/\*.*\*\///')
          tmp="${LINE%%\/\**}"
          tmp="${tmp}${LINE##*\*\/}"
          [[ ${#tmp} -gt 0 ]] && echo "$tmp"
        else
          f_com2=1
          tmp="${LINE%%\/\**}"
          [[ ${#tmp} -gt 0 ]] && echo "$tmp"
        fi
      else
        ## 連続空行は一行まで
        # CR   \r   Mac
        # LF   \n   UNIX
        # CRLF \r\n Windows
        ## Mac / UNIX
        if [[ ${#LINE} -eq 0 ]]; then
          ((++blank_line_zero))
        else
          blank_line_zero=0
        fi
        ## Windows
        if [[ ${#LINE} -eq 1 ]]; then
          ((++blank_line_one))
        else
          blank_line_one=0
        fi

        if [[ blank_line_zero -eq 0 && blank_line_one -eq 0 ]]; then
          echo "${LINE}"
          # 一周遅れで non_blank_line_exist が有効化
          non_blank_line_exist=1
        elif [[ blank_line_zero -lt 2 && blank_line_one -lt 2 && non_blank_line_exist -ne 0 ]] || [ "$LINE" = "}" ]; then
          echo "${LINE}"
        fi
      fi
    else
      if [[ $LINE =~ \*\/ ]]; then
        ## ...*/
        f_com2=0
        tmp="${LINE##*\*\/}"
        # shellcheck disable=SC2001
        tmp=$(echo "$tmp" | sed 's/\s*$//')
        [[ ${#tmp} -gt 0 ]] && echo "$tmp"
      fi
    fi
  done <"$1"
}
hide_comments_rs() {
  # com1: //... , com2: /*...*/
  local f_com2 tmp blank_line_cnt line_number non_blank_line_exist
  blank_line_cnt=0
  f_com2=0
  line_number=0
  non_blank_line_exist=0
  # total_line_number=$(wc -l < "$1")
  while IFS="" read -r LINE || [ -n "$LINE" ]; do
    ((line_number++))
    if [[ $f_com2 -eq 0 ]]; then
      # req: one-linear
      [[ $LINE =~ dbg! ]] && continue
      [[ $LINE =~ eprintln! ]] && continue
      [[ $LINE =~ unused_doc_comments ]] && continue
      [[ $LINE =~ snippet ]] && continue
      if [[ $LINE =~ verification-helper:[[:blank:]]PROBLEM ]]; then
        url="${LINE##* }"
        url_setting
        continue
      fi
      # エラー表示過剰化機能の削除
      if [[ $LINE =~ \/\/ && ! $LINE =~ \".*\/\/.*\" ]]; then
        # 行末尾でも //... 削除
        # [:blank:]//...
        LINE=${LINE%%\/\/*}
        # sed と違い \s は使えず、[[:blank:]] を使う。
        [[ $LINE =~ ^[[:blank:]]*$ ]] && continue
      fi
      # shellcheck disable=SC2001
      LINE=$(echo "$LINE" | sed 's/\s*$//')
      if [[ $LINE =~ \/\* ]]; then
        ## /*...
        # 一行での /*...*/ に対策
        if [[ $LINE =~ \/\*.*\*\/ ]]; then
          # shellcheck disable=SC2001
          # tmp=$(echo "$LINE" | sed 's/\/\*.*\*\///')
          tmp="${LINE%%\/\**}"
          tmp="${tmp}${LINE##*\*\/}"
          [[ ${#tmp} -gt 0 ]] && echo "$tmp"
        else
          f_com2=1
          tmp="${LINE%%\/\**}"
          [[ ${#tmp} -gt 0 ]] && echo "$tmp"
        fi
      else
        ## 連続空行は一行まで
        if [[ ${#LINE} -eq 0 ]]; then
          ((++blank_line_cnt))
        else
          blank_line_cnt=0
        fi

        if [[ blank_line_cnt -eq 0 ]]; then
          echo "${LINE}"
          # 一周遅れで non_blank_line_exist が有効化
          non_blank_line_exist=1
        elif [[ blank_line_cnt -lt 2 && non_blank_line_exist -ne 0 ]]; then
          echo "${LINE}"
        fi
      fi
    else
      if [[ $LINE =~ \*\/ ]]; then
        ## ...*/
        f_com2=0
        blank_line_cnt=2
        non_blank_line_exist=0
        tmp="${LINE##*\*\/}"
        # shellcheck disable=SC2001
        tmp=$(echo "$tmp" | sed 's/\s*$//')
        [[ ${#tmp} -gt 0 ]] && echo "$tmp"
      fi
    fi
  done <"$1"
}
hide_comments_py() {
  # com1: #... , com2: """..."""
  local f_com2 heredoc tmp blank_line_zero blank_line_one line_number non_blank_line_exist
  f_com2=0
  heredoc=0
  line_number=0
  non_blank_line_exist=0
  # total_line_number=$(wc -l < "$1")
  while IFS= read -r LINE || [ -n "$LINE" ]; do
    ((line_number++))
    if [[ $f_com2 -eq 0 ]]; then
      if [[ $LINE =~ import[[:blank:]]sys || $LINE =~ \=sys\. ]]; then
        continue
      fi
      if [[ $LINE =~ \# && ! $LINE =~ \'\# && ! $LINE =~ \"\# ]]; then
        ## 行末尾でも #... 削除
        # なお、print("#") は非対応なので注意
        if [[ $LINE =~ verification-helper:[[:blank:]]PROBLEM ]]; then
          url="${LINE//*PROBLEM /}"
          url_setting
          continue
        fi
        ## [:blank:]#...
        LINE=${LINE%%\#*}
        # sed と違い \s は使えず、[[:blank:]] を使う。
        [[ $LINE =~ ^[[:blank:]]*$ ]] && continue
      fi
      # shellcheck disable=SC2001
      LINE=$(echo "$LINE" | sed 's/\s*$//')
      if [[ $LINE =~ ^[[:blank:]]*\' ]]; then
        if [[ $LINE =~ \'\'\' ]]; then
          if [[ $heredoc -eq 1 ]]; then
            heredoc=0
            echo "${LINE}"
            continue
          fi
          ## '''...
          f_com2=1
        # 一行での '...' '''...''' を除外
        elif [[ ! $LINE =~ \'$ ]]; then
          echo "${LINE}"
        fi
      elif [[ $LINE =~ ^[[:blank:]]*\" ]]; then
        if [[ $LINE =~ \"\"\" ]]; then
          if [[ $heredoc -eq 2 ]]; then
            heredoc=0
            echo "${LINE}"
            continue
          fi
          ## """...
          f_com2=2
        # 一行での "..." """...""" を除外
        elif [[ ! $LINE =~ \"$ ]]; then
          echo "${LINE}"
        fi
      else
        if [[ $LINE =~ \'\'\' ]]; then
          heredoc=1
        elif [[ $LINE =~ \"\"\" ]]; then
          heredoc=2
        fi
        # ## 連続空行は一行まで
        # # CR   \r   Mac
        # # LF   \n   UNIX
        # # CRLF \r\n Windows
        # ## Mac / UNIX
        # if [[ ${#LINE} -eq 0 ]]; then
        #   ((++blank_line_zero))
        # else
        #   blank_line_zero=0
        # fi
        # ## Windows
        # if [[ ${#LINE} -eq 1 ]]; then
        #   ((++blank_line_one))
        # else
        #   blank_line_one=0
        # fi

        # if [[ blank_line_zero -eq 0 && blank_line_one -eq 0 ]]; then
        #   echo "${LINE}"
        #   non_blank_line_exist=1
        # elif [[ blank_line_zero -lt 2 && blank_line_one -lt 2 && non_blank_line_exist -ne 0 ]]; then
        #   echo "${LINE}"
        # fi
        echo "${LINE}"
      fi
    elif [[ $f_com2 -eq 1 ]]; then
      if [[ $LINE =~ \'\'\' ]]; then
        ## ..."""
        f_com2=0
        tmp="${LINE##*\'\'\'}"
        # shellcheck disable=SC2001
        tmp=$(echo "$tmp" | sed 's/\s*$//')
        [[ ${#tmp} -gt 0 ]] && echo "$tmp"
      fi
    elif [[ $f_com2 -eq 2 ]]; then
      if [[ $LINE =~ \"\"\" ]]; then
        ## ..."""
        f_com2=0
        tmp="${LINE##*\"\"\"}"
        # shellcheck disable=SC2001
        tmp=$(echo "$tmp" | sed 's/\s*$//')
        [[ ${#tmp} -gt 0 ]] && echo "$tmp"
      fi
    fi
  done <"$1"
}
submit_prepare() {
  if [ "$supporturl" -eq 1 ]; then
    ## oj s does not support
    indicator "!" "${C_BRED}oj s does not support \"${baseurl}\".${C_RESET} Submit it yourself."
    echo -e "${C_BGREEN}> submit: $submitpath"
    echo -e "> url: $(gray_if_not_found "$url")${C_RESET}"

    ## Open the file for submission in VSCode.
    code "$submitpath"
    ## clipboardにコピー
    # clip.exe < "$submitpath"
    echo -e "${C_BOLD}${projname}${C_RESET} for submission has been ${C_BOLD}copied to clipboard${C_RESET}."

    ## Open the URL for submission.
    # _cnt=$(< "$TIME_FILE")

    # create TIME_FILE
    if [ ! -f "$TIME_FILE" ]; then
      echo "" > "$TIME_FILE"
    fi
    _cnt="$(sed -n 1p "$TIME_FILE")"
    _url="$(sed -n 2p "$TIME_FILE")"
    if [ -n "$_url" ]; then
      tmp=$(chro 0)
      tmp=${tmp%%.*}
      echo The url \""$_url"\" was opened "$(date -d@"$tmp" -u +%H:%M:%S)"\("$tmp"s\) ago.

      # 小数演算
      # res=`echo "$tmp < 1000" | bc`
      # if [ $result -eq 1 ]; then
      if [ "$url" = "$_url" ] && [[ $tmp -lt 180 ]]; then
        echo -e "It has not been 3 minutes since ${C_BOLD}oj s${C_RESET} opened this URL, so it will ${C_RED}not be opened${C_RESET}."
        eexit 0
      fi
    fi
    xdg-open "$url"
    date +%s.%3N >"$TIME_FILE"
    echo "$url" >>"$TIME_FILE"
    eexit 0
  fi
  echo -e "${C_BGREEN}> submit: $submitpath"
  echo -e "> url: $(gray_if_not_found "$url")${C_RESET}"
}
trash_random() {
  if [ -n "$randomfolder" ]; then
    # -p により中継フォルダも生成
    [ -d "$randomfolder" ] || mkdir -p "$randomfolder"
    # * に "" を被せると、wildcardではなくただのasteriskになってしまう
    rm "$randomfolder"/random-*.in
    rm "$randomfolder"/random-*.out
  fi
}
chro() {
  cnt=$(date +%s.%3N)
  if [[ $1 -eq 0 ]]; then
    # bc で小数点以下も表示
    # 「awk '{A, B}'」(文字列抽出)によって1未満の時、整数部の 0 が表示されないのを回避
    # 別解：elapsed=$(printf "%0.3f" "$(echo "$cnt" - "$_cnt" | bc)")
    elapsed=$(echo "scale=3; ${cnt} - ${_cnt}" | bc | awk '{printf "%.3f", $0}')
    # elapsed=$(echo "scale=3; ${cnt} - ${_cnt}" | bc)
    _cnt="$cnt"
    echo "${elapsed}"
    # echo "$(date -d@"${elapsed}" -u +%M:%S.%3N)"
  fi
  _cnt="$cnt"
}
width_reduced_cat() {
  while IFS= read -r LINE || [ -n "$LINE" ]; do
    if [[ ${#LINE} -gt 400 ]]; then
      ((cnt = ${#LINE} - 100))
      echo -e "${LINE::100}${C_GRAY} ... ($cnt chars) ...${C_BOLD}"
    else
      echo "$LINE"
    fi
  done <"$1"
}
reduced_cat() {
  local line_num
  line_num=$(wc -l <"$1")
  if [[ $line_num -gt 30 ]]; then
    # 縦幅調整
    head -n 10 "$1"
    ((line_num -= 20))
    echo -e "${C_GRAY}... ($line_num lines) ...${C_BOLD}"
    tail -n 10 "$1"
  else
    # 横幅調整
    width_reduced_cat "$1"
  fi
}
gen_diff_judging() {
  trash_random
  ## [input]
  for i in $(seq ${GEN_NUM}); do
    ./generate.py >"$randomfolder/random-$(printf "%03d" "$i").in"
  done
  local name num_AC num_WA t_out t_exp
  num_AC=0
  num_WA=0
  chro 1
  echo
  for f in "$randomfolder"/random-*.in; do
    ## [output]
    "$outpath" <"$f" >"${f/\.in/\.out}"
    t_out=$(chro 0)
    ## [expected]
    case "$answersuffix" in
    'txt') cat "$answeroutpath" >"${f/.in/-expected.out}" ;;
    *) "$answeroutpath" <"$f" >"${f/.in/-expected.out}" ;;
    esac
    t_exp=$(chro 0)

    if [ "$(diff -b "${f/.in/.out}" "${f/.in/-expected.out}")" = "" ]; then
      # AC
      echo -e "[${C_GREEN}SUCCESS${C_RESET}] ${C_GREEN}AC${C_RESET}"
      ((++num_AC))
    else
      # WA
      echo -e "[${C_RED}FAILURE${C_RESET}] ${C_RED}WA${C_RESET}"
      ((++num_WA))
    fi
    ## input:
    name=$f
    echo -e "input: ${name} (./generate.py)${C_BOLD}"
    reduced_cat "${f}"
    ## output:
    name=${name/.in/.out}
    echo -e "\n${C_RESET}output: ${name} (${projpath} ${t_out}s)${C_BOLD}"
    reduced_cat "${f/.in/.out}"
    ## expected:
    name=${name/.out/-expected.out}
    echo -e "\n${C_RESET}expected: ${name} (${answerpath} ${t_exp}s)${C_BOLD}"
    reduced_cat "${f/.in/-expected.out}"
    echo -e "${C_RESET}\n"
  done
  if [[ $num_WA -eq 0 ]]; then
    echo -e "[${C_GREEN}SUCCESS${C_RESET}] gen_diff_judging ${C_GREEN}success${C_RESET}: ${C_BOLD}${num_AC} AC / $((num_AC + num_WA)) cases${C_RESET}"
  else
    echo -e "[${C_RED}FAILURE${C_RESET}] gen_diff_judging ${C_RED}failed${C_RESET}: ${C_BOLD}${num_AC} AC / $((num_AC + num_WA)) cases${C_RESET}"
  fi
}
hr() {
  local lenL lenR
  lenL=$(((column_lim - ${#1} - 2) / 2))
  lenR=$(((column_lim - ${#1} - 1) / 2))
  seq -s "-" 0 "${lenL}" | tr -d "0-9\n"
  # echo -n: 改行しない
  [ -z "$1" ] && echo -n "--" || echo -n " $1 "
  seq -s "-" 0 "${lenR}" | tr -d "0-9"
}
conceal() {
  echo -en "${C_GRAY}$(seq -s 'x' 0 ${#1} | tr -d '0-9\n')${C_RESET}"
}
indicator() {
  case $1 in
  $) echo -en "[${C_YELLOW}$1${C_RESET}] " ;;  # WARNING
  \#) echo -en "[${C_BLUE}$1${C_RESET}] " ;;   # INFO
  ! | -) echo -en "[${C_RED}$1${C_RESET}] " ;; # FAILURE
  +) echo -en "[${C_GREEN}$1${C_RESET}] " ;;   # SUCCESS
  # @)  echo -en "[${C_MAGENTA}$1${C_RESET}] ";;  # NETWORK
  *) echo -en "[$1] " ;; # otherwise
  esac
  [ -n "$2" ] && echo -e "${@:2}"
}
# shellcheck disable=SC2120
space_between_flags() {
  # $1 == "" とすると、" -y" と "" での分岐が可能
  tmp=0
  [ -n "$1" ] && ((tmp++))
  [ -n "$2" ] && ((tmp += 2))
  [ -n "$3" ] && ((tmp += 4))
  case $tmp in
  0) ;;
  1) echo "$1" ;;
  2) echo "$2" ;;
  3) echo "$1 $2" ;;
  4) echo "$3" ;;
  5) echo "$1 $3" ;;
  6) echo "$2 $3" ;;
  7) echo "$1 $2 $3" ;;
  esac
}
confirm() {
  local res tmp
  [ -z "$1" ] && tmp="" || tmp="$1 "
  echo -en "${tmp}Do you want to continue? (Timeout in 10s.) [Y/n]: "
  read -t 10 -r res
  case $res in
  [yY][eE][sS] | [yY]) return 0 ;;
  *)
    echo
    return 1
    ;;
  esac
}
eexit() {
  hr
  exit "$1"
}
caution() {
  case $projsuffix in
  'cpp')
    if [ -n "$lineVisComments" ]; then
      indicator "#" "${C_BOLD}Visible comments:\n$lineVisComments\n${C_BOLD}  (See $submitpath for details.)${C_RESET}"
    fi
    flag=0
    LINE="$(search sync_with_stdio "$submitpath")"
    [ -z "$LINE" ] && ((flag++))
    LINE="$(search endl "$submitpath")"
    [ -z "$LINE" ] && ((flag += 2))
    case $flag in
    0) indicator "!" "${C_BRED}endl${C_RESET} is found." ;;
    1) indicator "!" "${C_BRED}FastIO${C_RESET} is not found. ${C_BRED}endl${C_RESET} is found." ;;
    3) indicator "!" "${C_BRED}FastIO${C_RESET} is not found." ;;
    esac
    ;;
  'py')
    if [ -n "$lineVisComments" ]; then
      indicator "#" "${C_BOLD}Visible comments:\n$lineVisComments\n${C_BOLD}  (See $submitpath for details.)${C_RESET}"
    fi
    ;;
  esac
}
show_if_found() {
  [ -n "$1" ] && echo "$2"
}
gray_if_not_found() {
  echo "${1:-${C_GRAY}(not found)${C_RESET}}"
}
oj_login() {
  if [ ! -e "$PASS_FILE" ]; then
    indicator "-" "${PASS_FILE} does not exist"
    return 0
  fi
  supporturl=0
  tmp="$(search OJ_COOKIE "$PASS_FILE")"
  OJ_COOKIE="${tmp#*\=}"
  tmp="$(search "$baseurl" "$PASS_FILE")"
  tmp="${tmp#*\=}"
  username="${tmp%,*}"
  password="${tmp#*,}"
  if ! (search "$username" "$OJ_COOKIE" >/dev/null && search "$baseurl" "$OJ_COOKIE" >/dev/null); then
    [ -e "$OJ_COOKIE" ] && rm "$OJ_COOKIE"
    indicator "$" oj login -u "$username" -p "$(conceal "$password")" --use-browser never "$url"
    oj login -u "$username" -p "$password" --use-browser never "$url"
  else
    indicator "+" "You($C_BGREEN$username$C_RESET) are already signed in with $OJ_COOKIE"
  fi
}

# ------------------------------------------------------------------------------------------
hr "Bundle"

CUR_DIR="${0%/*}"
declare -a POSI_PARAMETER OPTI_ARG_ARR OPTI_PARAMETER
f=0
cnt=0
for tmp in "$@"; do
  ((cnt++))
  if [[ $f -le 1 ]]; then
    if [[ $f -eq 0 ]] && [ "${tmp::1}" = "-" ]; then
      OPTI_ARG_ARR=("${OPTI_ARG_ARR[@]}" "$tmp")
      f=1
    elif [[ $f -eq 1 ]] && [[ ! $tmp =~ ^a-z$ ]]; then
      OPTI_PARAMETER=("${OPTI_PARAMETER[@]}" "$tmp")
    else
      f=2
    fi
  fi
  if [[ $f -eq 2 ]]; then
    if [[ $tmp =~ ^[a-z]*$ ]]; then
      POSI_ARG="$tmp"
      f=3
    elif [[ $cnt -eq $# ]]; then
      # DEFAULT
      # $1(ファイル名) に &tmpl.cpp のように & が入っていると /mnt/d/compro/src/ となりバグる
      projpath=${tmp/${CUR_DIR}/.}
      projpath=$(complete_file_path "$projpath")
      projname=${projpath##*/}
      projprefix=${projname%.*}
      projsuffix=${projpath##*.}
    fi
  elif [[ $f -eq 3 ]]; then
    if [[ $cnt -eq $# ]]; then
      # $1(ファイル名) に &tmpl.cpp のように & が入っていると /mnt/d/compro/src/ となりバグる
      projpath=${tmp/${CUR_DIR}/.}
      projpath=$(complete_file_path "$projpath")
      projname=${projpath##*/}
      projprefix=${projname%.*}
      projsuffix=${projpath##*.}
    else
      POSI_PARAMETER=("${POSI_PARAMETER[@]}" "$tmp")
    fi
  fi
done

## mkdir
[ -d "./bin" ] || mkdir -p "./bin"
[ -d "./bin/out" ] || mkdir -p "./bin/out"
[ -d "./bin/tests" ] || mkdir -p "./bin/tests"
[ -d "./bin/random" ] || mkdir -p "./bin/random"

## hide_comments
outpath="./bin/out/${projprefix}.rel"
dbgoutpath="./bin/out/${projprefix}.dbg"
submitpath="./bin/out/${projname}"
case "$projsuffix" in
c)
  hide_comments_cpp "$projpath" >"$submitpath"
  ;;
'cpp')
  hiddenpath="./bin/out/${projprefix}-hdn.cpp"
  bundledpath="./bin/out/${projprefix}-bdl.cpp"
  # submitpath="./bin/out/${projprefix}.cpp"

  # 1. Hide comments.
  expands_acl=1
  indicator "$" 1. hide_comments_cpp "$projpath" \> "$hiddenpath"
  hide_comments_cpp "$projpath" >"$hiddenpath"

  # 2. Bundle.
  indicator "$" 2. oj-bundle "$hiddenpath" \> "$bundledpath"
  if ! oj-bundle -I./lib/cpp "$hiddenpath" >"$bundledpath"; then
    eexit 1
  fi

  # 3. Hide comments.
  # atcoder.jp でないなら expand する. (0:true の慣例に従っている)
  [ "$baseurl" != "atcoder.jp" ] && expands_acl=0
  indicator "$" 3. hide_comments_cpp "$bundledpath" \> "$submitpath"
  hide_comments_cpp "$bundledpath" >"$submitpath"

  # 4. rm
  [ -e "$hiddenpath" ] && rm "$hiddenpath"
  [ -e "$bundledpath" ] && rm "$bundledpath"
  ;;
'cs')
  outpath="./bin/Debug/netcoreapp3.1/ComPro"
  dbgoutpath="./bin/Debug/netcoreapp3.1/ComPro"
  hiddenpath="./bin/out/${projprefix}-hdn.cpp"

  # 1. Hide comments.
  indicator "$" 1. hide_comments_rs "$projpath" \> "$hiddenpath"
  hide_comments_rs "$projpath" >"$hiddenpath"

  # # 2. sed "/^$/d": 末尾の空行を削除
  # indicator "$" 2. sed "/^$/d" "$hiddenpath" \> "$submitpath"
  # sed "/^$/d" "$hiddenpath" > "$submitpath"

  # 3. Bundle: Unpack "using Lib.*;"s.
  indicator "$" 3. python3 ./lib/CSharp/expander.py "$hiddenpath" \> "$submitpath"
  if ! python3 ./lib/CSharp/expander.py "$hiddenpath" >"$submitpath"; then
    eexit 1
  fi

  # 4. rm
  [ -e "$hiddenpath" ] && rm "$hiddenpath"
  ;;
'go')
  # rm
  outgofolder="./bin/out_go"
  [ -d "$outgofolder" ] || mkdir -p "$outgofolder"
  [ -d "$outgofolder" ] && rm ${outgofolder}/*.go
  submitpath="${outgofolder}/${projname}"

  # format
  go fmt "$projpath"

  # 1. Hide comments.
  hiddenpath="${outgofolder}/${projprefix}-hdn.go"
  indicator "$" 1. hide_comments_rs "$projpath" \>"$hiddenpath"
  hide_comments_rs "$projpath" >"$hiddenpath"

  # 2. 末尾の空行を削除
  indicator "$" 2. python3 ./lib/go/expander.py -f "$hiddenpath" \>"$submitpath"
  if ! python3 ./lib/go/expander.py -f "$hiddenpath" >"$submitpath"; then
    eexit 1
  fi

  # rm
  [ -e "$hiddenpath" ] && rm "$hiddenpath"
  ;;
'rs')
  # Add a few lines to ./Cargo.toml
  if [[ $projpath =~ lib/rust ]]; then
    if [ -z "$POSI_ARG" ]; then
      indicator "$" cargo test --lib "$projsuffix"
      cargo test --lib "$projsuffix"
      eexit 0
    fi
  elif ! search "$projpath" "${CARGO_TOML}" >/dev/null; then
    echo -e "\n[[bin]]\nname = \"$projprefix\"\npath = \"$projpath\"" >>"${CARGO_TOML}"
  fi
  if [ "$projpath" != "$submitpath" ]; then
    # 1. Hide comments.
    hiddenpath="./bin/out/${projprefix}-hdn.rs"
    indicator "$" 1. hide_comments_rs "$projpath" \>"$hiddenpath"
    hide_comments_rs "$projpath" >"$hiddenpath"

    # 2. Bundle: Unpack include! macro.
    if [ "$baseurl" = "atcoder.jp" ]; then
      indicator "$" 2. python3 ./lib/rust/expander.py -f "$hiddenpath" \>"$submitpath"
      if ! python3 ./lib/rust/expander.py -f "$hiddenpath" >"$submitpath"; then
        eexit 1
      fi
    else
      indicator "$" 2. python3 ./lib/rust/expander.py -fp "$hiddenpath" \>"$submitpath"
      if ! python3 ./lib/rust/expander.py -fp "$hiddenpath" >"$submitpath"; then
        eexit 1
      fi
    fi

    # 3. rm
    [ -e "$hiddenpath" ] && rm "$hiddenpath"
  fi
  ;;
'py')
  outpath="$projpath"
  dbgoutpath="$projpath"
  hiddenpath="./bin/out/${projprefix}-hdn.py"
  if [ "$projpath" != "$submitpath" ]; then
    # 1. Hide comments.
    hide_comments_py "$projpath" >"$hiddenpath"
    # 2. 末尾の空行を削除
    # sed -z: 複数行 (\n も纏めてマッチ)
    indicator "$" 2. sed -z 's/\n*$//g' "$hiddenpath" | sed -z 's/^\n*//g' \>"$submitpath"
    sed -z 's/\n*$//g' "$hiddenpath" | sed -z 's/^\n*//g' >"$submitpath"
  fi
  ;;
esac
indicator "#" "submitpath: ${C_BBLUE}$submitpath${C_RESET}"

case "$POSI_ARG" in
a)
  ## shell_all_submissions
  case "$baseurl" in
  "atcoder.jp")
    # from: https://atcoder.jp/contests/abc167/tasks/abc167_c
    # to :  https://atcoder.jp/contests/abc167/submissions?f.Task=abc167_d&f.LanguageName=C%2B%2B&f.Status=AC
    case "$projsuffix" in
    'cpp')
      xdg-open "${url/tasks\//submissions?f.Task=}&f.LanguageName=C%2B%2B&f.Status=AC"
      ;;
    'cs')
      xdg-open "${url/tasks\//submissions?f.Task=}&f.LanguageName=C%23&f.Status=AC"
      ;;
    'go')
      xdg-open "${url/tasks\//submissions?f.Task=}&f.LanguageName=Go&f.Status=AC"
      ;;
    'py')
      xdg-open "${url/tasks\//submissions?f.Task=}&f.LanguageName=Python3&f.Status=AC"
      ;;
    'rs')
      xdg-open "${url/tasks\//submissions?f.Task=}&f.LanguageName=Rust&f.Status=AC"
      ;;
    *)
      xdg-open "${url/tasks\//submissions?f.Task=}&f.Status=AC"
      ;;
    esac
    ;;
  "yukicoder.me")
    # from: https://yukicoder.me/problems/no/3014
    # to:   https://yukicoder.me/problems/no/3014/submissions?status=AC&sort_time=enabled
    xdg-open "${url}/submissions?status=AC&sort_time=enabled"
    ;;
  "judge.u-aizu.ac.jp")
    # from: https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_B&lang=jp
    # to:   https://judge.u-aizu.ac.jp/onlinejudge/solution.jsp?pid=DSL_2_B
    url=${url/description.jsp?/solution.jsp?p}
    xdg-open "${url%&*}"
    ;;
  "onlinejudge.u-aizu.ac.jp")
    # from1: https://onlinejudge.u-aizu.ac.jp/services/room.html#chr/problems/1148
    # to1:   https://onlinejudge.u-aizu.ac.jp/solutions/problem/1148
    # from2: https://onlinejudge.u-aizu.ac.jp/problems/DPL_1_G
    # to2:   https://onlinejudge.u-aizu.ac.jp/solutions/problem/DPL_1_G
    probtitle=${url##*\/}
    url="${url%\.ac\.jp\/*}.ac.jp/solutions/problem/${probtitle}"
    xdg-open "$url"
    ;;
  "judge.yosupo.jp")
    # from: https://judge.yosupo.jp/problem/suffixarray
    # to:   https://judge.yosupo.jp/submissions/?problem=suffixarray&order=%2Btime&status=AC
    xdg-open "${url/problem\//submissions\/?problem=}&order=%2Btime&status=AC"
    ;;
  "spoj.com")
    # from: https://www.spoj.com/problems/RMQSQ/
    # to:   https://www.spoj.com/status/RMQSQ/
    xdg-open "${url/problems/status}"
    ;;
  *)
    hr "Info"
    echo -e "${C_BRED}> shell_all_submissions does not support \"${baseurl}\".${C_RESET}"
    echo "> url: $url"
    eexit 1
    ;;
  esac
  eexit 0
  ;;
p)
  ## shell_git_push_all
  hr "git push origin master:master"
  search -m >/dev/null && comment="${LINE:3}" || comment="Update"
  if ! confirm "${C_BBLUE}-m \"$comment\"${C_RESET} has been set."; then
    echo
    eexit 0
  fi
  indicator "$" "${C_BOLD}git add --all${C_RESET}"
  git add --all
  indicator "$" "${C_BOLD}git commit ${C_BBLUE}-m \"$comment\"${C_RESET}${C_BOLD} .${C_RESET}"
  git commit -m "${comment}" .
  indicator "$" "eval \$(ssh-agent -s)"
  eval "$(ssh-agent -s)"
  indicator "$" "${C_BOLD}git push origin master:master${C_RESET}"
  if ! git push origin master:master; then
    indicator "!" "Run ${C_INLINE}\"git pull origin master\"${C_RESET}."
  fi
  indicator "#" "${C_BBLUE}@see https://github.com/nullputra/nlptr-lib${C_RESET}"
  eexit 0
  ;;
esac

for tmp in "${OPTI_ARG_ARR[@]}"; do
  case "$tmp" in
  '-h')
    usage
    eexit 0
    ;;
  esac
done

hr
# ------------------------------------------------------------------------------------------
hr "Info"

# dateコマンド参考 https://shellscript.sunone.me/date.html
# indicator "#" "date:    $(date +'%m/%d(%a) %H:%M')"
indicator "#" "problem: $(gray_if_not_found "$problem")"
# indicator "#" "url:     $(gray_if_not_found "$url")"
if [ "$baseurl" = "onlinejudge.u-aizu.ac.jp" ]; then
  tmp=${url##*\/}
  indicator "#" "aka:     https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=${tmp}&lang=jp"
  indicator "#" "WJ:      https://judge.u-aizu.ac.jp/onlinejudge/submission.jsp"
fi
indicator "#" "posiarg: $(gray_if_not_found "$POSI_ARG")"

## Makefile,sh,txt,jsonの時は退避
if [ "${projpath##*/}" = "Makefile" ]; then
  indicator "!" "${C_BRED}\${projpath##*/} = ${projpath##*/}${C_RESET}"
  eexit 1
elif [ "$projsuffix" = "sh" ] || [ "$projsuffix" = "txt" ] || [ "$projsuffix" = "json" ]; then
  indicator "!" "${C_BRED}\${projpath##*.} = ${projpath##*.}${C_RESET}"
  eexit 1
fi

## login automatically
# supported websites https://github.com/online-judge-tools/api-client#supported-websites
# shell版seleniumのshellniumでブラウザ自動操作 https://qiita.com/Rasukarusan/items/70a54bd38c71a07ff7bd
case "$POSI_ARG" in
t)
  case "$baseurl" in
  "atcoder.jp")
    oj_login
    ;;
  "onlinejudge.u-aizu.ac.jp")
    # arena: https://onlinejudge.u-aizu.ac.jp/services/room.html#chr/problems/1148
    # to:    https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1148
    # ( to:  https://onlinejudge.u-aizu.ac.jp/challenges/sources/ICPC/Prelim/1148 )
    probtitle=${url##*\/}
    url="https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=${probtitle}"
    ;;
  esac
  ;;
s)
  supporturl=1
  # oj s 対応は atcoder のみ
  case "$baseurl" in
  "atcoder.jp")
    supporturl=0
    oj_login
    ;;
  "yukicoder.me")
    # frm: https://yukicoder.me/problems/no/225
    # (to:  https://yukicoder.me/problems/610/submit )
    ;;
  "codeforces.com")
    # frm: https://codeforces.com/contest/1546/problem/A
    # to:  https://codeforces.com/contest/1546/submit
    url=${url%problem*}submit
    ;;
  "judge.u-aizu.ac.jp")
    # frm: https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_A&lang=jp
    # to:  https://judge.u-aizu.ac.jp/onlinejudge/submission.jsp#submit/DSL_2_A
    url=${url/description.jsp?id=/submission.jsp#submit\/}
    url=${url%&*}
    ;;
  "judge.yosupo.jp") ;;

  "poj.org")
    # frm: http://poj.org/problem?id=2031
    # to:  http://poj.org/submit?problem_id=2031
    url=${url/problem?/submit?problem_}
    ;;
  "spoj.com")
    # frm: https://www.spoj.com/problems/RMQSQ/
    # to:  https://www.spoj.com/submit/RMQSQ/
    url=${url/problems/submit}
    ;;
  esac
  ;;
v)
  case "$baseurl" in
  "atcoder.jp")
    oj_login
    ;;
  "yukicoder.me")
    oj_login
    ;;
  esac
  ;;
esac

hr
# ------------------------------------------------------------------------------------------
hr "Execution Result"

# pathに!が含まれている(!memo.cpp)と、ctrl+click で開けられない
indicator "#" "submitpath: ${C_BBLUE}$submitpath${C_RESET}"
[ -z "$submitpath" ] && submitpath=$projpath

case "$POSI_ARG" in
'')
  ## shell_input
  indicator "$" make "proj=$projpath dbgrun"
  # shellcheck disable=SC2046
  if ! make "proj=$projpath" dbgrun; then
    indicator "-" "Failed to compile."
    eexit 1
  fi
  indicator "+" "Compilation succeeded."
  # indicator "#" "icpc_hacker > ./output.txt"
  # make "proj=$projpath""" dbgrun | tail -n +2 > ./output.txt
  caution
  eexit 0
  ;;
r)
  ## shell_reactive
  indicator "$" make "proj=$projpath dbgout"
  # shellcheck disable=SC2046
  if ! make "proj=$projpath" dbgout; then
    indicator "-" "Failed to compile."
    eexit 1
  fi
  indicator "+" "Compilation succeeded."
  echo -e "Run ${C_INLINE}${dbgoutpath}${C_RESET} on bash."
  # echo -e "Run ${C_INLINE}${dbgoutpath}${C_RESET} on bash. (The command has been copied to clipboard.)"
  # clip.exe < "$dbgoutpath"
  # xsel --clipboard --input < "$dbgoutpath"
  caution
  eexit 0
  ;;
g)
  indicator "$" make "proj=$projpath dbgout"
  # shellcheck disable=SC2046
  if ! make "proj=$projpath" dbgout; then
    indicator "-" "Failed to compile."
    eexit 1
  fi
  indicator "+" "Compilation succeeded."
  ;;
'dbg')
  indicator "$" make "proj=$projpath dbgout"
  # shellcheck disable=SC2046
  if ! make "proj=$projpath" dbgout; then
    indicator "-" "Failed to compile."
    eexit 1
  fi
  indicator "+" "Compilation succeeded."
  eexit 0
  ;;
*)
  indicator "$" make "proj=$projpath relout"
  # shellcheck disable=SC2046
  if ! make "proj=$projpath" relout; then
    indicator "-" "Failed to compile."
    eexit 1
  fi
  indicator "+" "Compilation succeeded."
  ;;
esac

hr
# ------------------------------------------------------------------------------------------
if [[ ${#POSI_PARAMETER[*]} -eq 0 ]]; then
  hr "POSI_ARG: $POSI_ARG"
else
  # shellcheck disable=SC2116
  hr "POSI_ARG: $POSI_ARG $(echo "${POSI_PARAMETER[@]}")"
fi

randomfolder="./bin/random/${projprefix}"
if [ -z "$problem" ]; then
  indicator "!" "${C_BRED}URL does not exist.${C_RESET}"
  indicator "!" "${C_BRED}Make sure that the URL is set.${C_RESET}"
  eexit 1
fi

# task.jsonに書いたタスク名(eg.shell_submit)はvscode再起動後から有効化
case "$POSI_ARG" in
t)
  ## shell_test_sample
  indicator "$" "${C_BOLD}python3 save_codes.py "$url" "$submitpath"${C_RESET}"
  python3 save_codes.py "$url" "$submitpath"

  testfolder="./bin/tests/${problem}"
  if [ "${POSI_PARAMETER[0]}" = "--system" ]; then
    testfolder="./bin/tests/${problem}_sys"
    case "$baseurl" in
    "atcoder.jp")
      # shellcheck disable=SC2125
      sampleinputfile=*
      ;;
    "judge.u-aizu.ac.jp" | "onlinejudge.u-aizu.ac.jp")
      sampleinputfile="judge_data.in"
      ;;
    esac
  fi
  ## oj t (sample_input)
  if [ ! -e "${testfolder}/${sampleinputfile}" ]; then
    ## dl
    [ -d "$testfolder" ] || mkdir -p "$testfolder"
    if [ "${POSI_PARAMETER[0]}" = "--system" ]; then
      DROPBOX_ACCESS_TOKEN="$(search DROPBOX_ACCESS_TOKEN "$TOKENS_FILE")"
      DROPBOX_ACCESS_TOKEN="${DROPBOX_ACCESS_TOKEN#*\=}"
      indicator "$" oj d -d "$testfolder" "$url" --system --dropbox-token="$(conceal "$DROPBOX_ACCESS_TOKEN")"
      oj d -d "$testfolder" "$url" --system --dropbox-token="${DROPBOX_ACCESS_TOKEN}"
    else
      indicator "$" oj d -d "$testfolder" "$url"
      oj d -d "$testfolder" "$url"
    fi
  fi
  # (-e) Problems with accepted errors.(誤差) $LINEに格納
  # oj t -e 1e-6
  search -e
  # 0:true
  # shellcheck disable=SC2181
  if [ "$?" -eq 0 ]; then
    indicator "$" oj t -S -c "$outpath" -d "$testfolder" "${LINE}"
    oj t -S -c "$outpath" -d "$testfolder" "${LINE}"
  else
    indicator "$" oj t -S -c "$outpath" -d "$testfolder"
    oj t -S -c "$outpath" -d "$testfolder"
  fi
  ;;
f)
  ## shell_flexible_judging
  testfolder="./bin/tests/${problem}"
  ## oj t (sample_input)
  if [ ! -e "${testfolder}/${sampleinputfile}" ]; then
    ## dl
    [ -d "$testfolder" ] || mkdir -p "$testfolder"
    indicator "$" oj d -d "$testfolder" "$url"
    oj d -d "$testfolder" "$url"
  fi
  # shellcheck disable=SC2181
  indicator "$" oj t -S -c "$outpath" -d "$testfolder" --judge-command "python3 ./judge.py"
  oj t -S -c "$outpath" -d "$testfolder" --judge-command "python3 ./judge.py"
  ;;
s)
  ## shell_submit [-y(--yes): don't confirm]
  submit_prepare
  case $projsuffix in
  'cs')
    if [ "${POSI_PARAMETER[0]}" = "-y" ]; then
      indicator "$" oj s -y -l 4010 "$url" "$submitpath\n"
      oj s -y -l 4010 "$url" "$submitpath"
    else
      indicator "$" oj s -l 4010 "$url" "$submitpath\n"
      oj s -l 4010 "$url" "$submitpath"
    fi
    ;;
  'py')
    # Python: --language Python
    # PyPy:   --language 4047
    if [ "${POSI_PARAMETER[0]}" = "-y" ]; then
      indicator "$" oj s -y -l Python "$url" "$submitpath\n"
      oj s -y -l Python "$url" "$submitpath"
    else
      indicator "$" oj s -l Python "$url" "$submitpath\n"
      oj s -l Python "$url" "$submitpath"
    fi
    ;;
  *)
    if [ "${POSI_PARAMETER[0]}" = "-y" ]; then
      indicator "$" oj s -y "$url" "$submitpath\n"
      oj s -y "$url" "$submitpath"
    else
      indicator "$" oj s "$url" "$submitpath\n"
      oj s "$url" "$submitpath"
    fi
    ;;
  esac
  indicator "$" "${C_BOLD}python3 save_codes.py "$url" "$submitpath"${C_RESET}"
  python3 save_codes.py "$url" "$submitpath"
  # if [ "$baseurl" = "atcoder.jp" ]; then
  #   # from: https://atcoder.jp/contests/abc131/tasks/abc131_a
  #   # to: https://atcoder.jp/contests/abc131/submissions/me
  #   # to: https://atcoder.jp/contests/abc240/submissions?f.User=USER
  #   xdg-open "${url%tasks*}submissions/?f.User=$username"
  # fi
  ;;
g)
  ## shell_gen
  trash_random

  # GEN_NUM setter
  LINE="$(search GEN_NUM=)"
  if [ -n "${LINE}" ]; then
    GEN_NUM=${LINE##*=}
    indicator "#" "\${GEN_NUM} changed to ${GEN_NUM}."
  fi

  indicator "$" oj g/i -c "$dbgoutpath" -d "$randomfolder" ./generate.py "$GEN_NUM"
  oj g/i -c "$dbgoutpath" -d "$randomfolder" ./generate.py "$GEN_NUM"
  ;;
d)
  ## shell_gen_diff_judging
  # random*.in / random*.out / random*_expected.out
  LINE="$(search GEN_NUM=)"
  if [ -n "${LINE}" ]; then
    GEN_NUM=${LINE##*=}
    indicator "#" "\${GEN_NUM} changed to ${GEN_NUM}."
  fi
  # LINE="$(search .cpp)"
  # [ -z "${LINE}" ] && LINE="$(search .py)"
  LINE="$(search "(.cpp)|(.py)|(.txt)")"
  if [ -z "$LINE" ]; then
    answerpath=./output.txt # model answer
    indicator "#" "\${answerpath} automatically changed to ${answerpath}."
  else
    answerpath=$(complete_file_path "${LINE}") # model answer
  fi
  if [ -e "$answerpath" ]; then
    answersuffix=${answerpath##*.}
    tmp=${answerpath##*/}
    answername=${tmp%.*}
    case "$answersuffix" in
    'txt')
      answeroutpath="${answerpath}"
      if [[ $GEN_NUM -ne 1 ]]; then
        GEN_NUM=1
        indicator "#" "\$GEN_NUM automatically changed to ${GEN_NUM}."
      fi
      ;;
    'py')
      answeroutpath="${answerpath}"
      ;;
    'cpp' | c)
      answeroutpath="./bin/out/${answername}.rel"
      ;;
    'cs')
      answeroutpath="./bin/Debug/netcoreapp3.1/ComPro"
      ;;
    esac
    # case "$projsuffix" in
    #   'py')
    #     outpath="\"python3 ${projpath}\"";;
    # esac
    indicator "$" make "proj=$answerpath relout"
    if ! make "proj=$answerpath relout"; then
      indicator "-" "Failed to compile."
      eexit 1
    fi
    indicator "+" "Compilation succeeded."
    gen_diff_judging
  else
    indicator "!" "${C_BRED}The name of the model answer file(${answerpath}) is invalid."
    echo -e "  Verify $INPUT_FILE${C_RESET}"
  fi
  ;;
v)
  oj_login
  indicator "$" oj-verify run "${projpath}"
  oj-verify run "${projpath}"
  ;;
*)
  indicator "!" "${C_BBLUE}There is something wrong with ./${0##*\/} or .vscode/tasks.json"
  echo -e "  Verify ./${0##*\/} or .vscode/tasks.json${C_RESET}"
  ;;
esac
caution
eexit 0
